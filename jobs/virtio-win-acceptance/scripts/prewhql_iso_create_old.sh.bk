#!/bin/bash
#############################################################################
# This script is used to create virtio-win-prewhql iso
# before start the script you should
# 1. config the version of the virtio-win using: -w xx -q xx
# 2. check the default url is correct.
# 3. check the drvier path in the Associative Arrays.
# 4. using root to run this script
# the iso will put in you $ROOT_PATH
#############################################################################
set -x

SEND_MAIL=No
MAINTAINER_MAIL="aliang@redhat.com"
NOTIFY_MAIL_LIST="aliang@redhat.com kvm-autotest@redhat.com"

usage()
{
    cat << EOF
    command [option]
    option:
    -p : assign the root path like "/root"
    -n : if don't want download, add -n,default is down the package
    -w : set virtio_win_version, like : " -w 55"
    -q : set qxl_version like "-q 17"
    -u : set update nfs, default is put the iso under the root path
    -r : clear the package that download, default is not clear
    -h : help
    example: ./create  -d no   this will not download the package, using it when you have downloaded the package
             ./create  -w 55
             ./create  -w 55 -q 17
EOF
    exit 0
}

ARGS=`getopt -o p:nw:q:urh -- "$@"`
[ $? -ne 0 ] && usage
eval set -- "${ARGS}"
while true
do
    case "$1" in
        -p|--rootpath) P_PATH=$2; shift 2;;
        -n|--download) DOWNLOAD='No'; shift;;
        -w|--virtio_win_version) VIRTIO_WIN_VER=$2; shift 2;;
        -q|--qxl_version) QXL_VERSION=$2; shift 2;;
        -u|--update_nfs) UPDATE_NFS='Yes'; shift ;;
        -r|--remove) REMOVE="Yes"; shift;;
        -h|--help) usage ;;
        --)shift; break ;;
        *) usage;exit 1;;
    esac
done

TMP_DIR=/var/tmp
TMP_MNT=$TMP_DIR/tmp
NFS_MNT=$TMP_DIR/nfs
INFO_FILE=$TMP_DIR/.virtio-win-prewhql-info
#URL_ROOT=http://download.devel.redhat.com/brewroot/packages
URL_ROOT=http://download-node-02.eng.bos.redhat.com/brewroot/packages
VIRTIO_PKG_LINK=$URL_ROOT/virtio-win-prewhql/0.1/
QXL_PKG_LINK=$URL_ROOT/qxl-win/0.1/
#QXLWDDM_VERSION=
#QXLWDDM_PKG_LINK=$URL_ROOT/qxlwddm/0.1/
QEMU_GA_LINK=$URL_ROOT/qemu-ga-win/
QEMU_GA_MAIN_VERSION=$(curl -s $QEMU_GA_LINK | sed -n 's/.*<a href="\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p'| sed -n '$p')
QEMU_GA_SUB_VERSION=$(curl -s $QEMU_GA_LINK$QEMU_GA_MAIN_VERSION/ | sed -n 's/.*<a href="\([0-9]\+\).*/\1/p'| sed -n '$p')

touch $INFO_FILE

[ -d $TMP_DIR ] || mkdir -p $TMP_DIR

if [ "_$VIRTIO_WIN_VER" == "_" ]
then
    # the ROOT_URL has been changed ,need to update or the following commands will not work
    VIRTIO_WIN_VER_LAT=$(curl -s $VIRTIO_PKG_LINK | sed -n 's/.*<a href="\([0-9]\+\).*/\1/p'| sed -n '$p')
fi

if [ "_$QXL_VERSION" == "_" ]
then
    QXL_VERSION_LAT=$(curl -s $QXL_PKG_LINK | sed -n 's/.*<a href="\([0-9]\+\).*/\1/p'| sed -n '$p')
fi

#if [ "_$QXLWDDM_VERSION" == "_" ]
#then
#    QXLWDDM_VERSION_LAT=$(curl -s $QXLWDDM_PKG_LINK | sed -n 's/.*<a href="\([0-9]\+\).*/\1/p'| sed -n '$p')
#fi


UPDATE_NFS=${UPDATE_NFS:-'No'}
NEED_WGET=${DOWNLOAD:-'Yes'}
ROOT_PATH=${P_PATH:=$PWD}
SUB_VERSION=${VIRTIO_WIN_VER:=$VIRTIO_WIN_VER_LAT}
QXL_VERSION=${QXL_VERSION:=$QXL_VERSION_LAT}
#QXLWDDM_VERSION=${QXLWDDM_VERSION:=$QXLWDDM_VERSION_LAT}
MAIN_VERSION=0.1
CLEAR_PATH=${REMOVE:="No"}

#http://download.eng.pnq.redhat.com/brewroot/packages/virtio-win-prewhql/0.1/125/win/virtio-win-prewhql-0.1.zip
URL_VIRT_WIN_ZIP=$URL_ROOT/virtio-win-prewhql/$MAIN_VERSION/$SUB_VERSION/win/virtio-win-prewhql-$MAIN_VERSION.zip
URL_QXL_W7_X64=$QXL_PKG_LINK/$QXL_VERSION/win/qxl_w7_x64.zip
URL_QXL_W7_X86=$QXL_PKG_LINK/$QXL_VERSION/win/qxl_w7_x86.zip
URL_QXL_XP_X86=$QXL_PKG_LINK/$QXL_VERSION/win/qxl_xp_x86.zip
URL_QXL_2K8R2_X64=$QXL_PKG_LINK/$QXL_VERSION/win/qxl_8k2R2_x64.zip
#URL_QXL_W8=$QXLWDDM_PKG_LINK/$QXLWDDM_VERSION/win/qxlwddm-0.1.zip
URL_QEMU_GA_X86=$QEMU_GA_LINK$QEMU_GA_MAIN_VERSION/$QEMU_GA_SUB_VERSION/win/qga/installer/x86/qemu-ga-x86.msi
URL_QEMU_GA_X64=$QEMU_GA_LINK$QEMU_GA_MAIN_VERSION/$QEMU_GA_SUB_VERSION/win/qga/installer/x64/qemu-ga-x64.msi

#create the related dir
if [ ! -e $ROOT_PATH/virt_win_iso_create ]
then
    mkdir -p $ROOT_PATH/virt_win_iso_create/{iso,source,virtio-win-vfd,vfs_source,qxl,guest-agent}
fi

ISO_CREATE_ROOT_PATH=$ROOT_PATH/virt_win_iso_create
VIR_WIN_TGT_ISO_PATH=$ISO_CREATE_ROOT_PATH/iso
VIR_WIN_TGT_VFD_PATH=$ISO_CREATE_ROOT_PATH/virtio-win-vfd
VIR_WIN_RESOURCE_PATH=$ISO_CREATE_ROOT_PATH/source
VIR_WIN_VFS_RESOURCE_PATH=$ISO_CREATE_ROOT_PATH/vfs_source
VIR_WIN_QXL_RESOURCE_PATH=$ISO_CREATE_ROOT_PATH/qxl
VIR_WIN_QEMU_GA_RESOURCE_PATH=$ISO_CREATE_ROOT_PATH/guest-agent

#Need to add Win_ISO_VERSION Win2016, how to find the correct version name ?
WIN_ISO_VERSION="2k12 2k12R2 2k3 2k8 2k8R2 w7 w8 w8.1 xp w10 2k16"
WIN_VFD_VERSION="Win2003 Win2008 Win2008R2 Win2012 Win2012R2 Win7 Win8 Win8.1 WinXP Win10 Win2016"
WIN_QXL_VERSION="xp w7 2k8R2"
ARCH_ISO="amd64 x86"
ARCH_VFD="amd64 i386"

# Packages need copy to vfd
# PDB is the debug symbols file, and PDB File is too big
# so that we can not put it in the floppy.
# only need netkvm,viostor and vioscsi driver in floppy
VFD_PACKGE_NETKVM="netkvm.cat netkvm.inf netkvm.sys"
#VFD_PACKGE_NETKVM_EXT="netkvmco.dll"
VFD_PACKGE_VIOSTOR="viostor.cat viostor.inf viostor.sys"
VFD_PACKGE_VIOSCSI="vioscsi.cat vioscsi.inf vioscsi.sys"
#VFD_PACKGE_QXL="qxl.cat qxldd.dll qxl.inf qxl.sys"
#VFD_PACKGE_QXLWDDM="qxldod.cat qxldod.inf qxldod.sys"

# Packages need copy to iso
declare -A PACKGE_ALL
PACKGE_ALL=([BALLON]="balloon.cat balloon.inf balloon.pdb balloon.sys blnsvr.exe blnsvr.pdb")
PACKGE_ALL+=([NETKVM]="netkvm.cat netkvm.inf netkvm.pdb netkvm.sys")
PACKGE_ALL+=([NETKVM_EXT]="netkvmco.dll")
PACKGE_ALL+=([VIOSER]="vioser.cat vioser.inf vioser.pdb vioser.sys")
PACKGE_ALL+=([VIOSTOR]="viostor.cat viostor.inf viostor.pdb viostor.sys")
PACKGE_ALL+=([VIOSCSI]="vioscsi.cat vioscsi.inf vioscsi.pdb vioscsi.sys")
PACKGE_ALL+=([VIORNG]="viorng.cat viorng.inf viorng.pdb viorng.sys viorngum.dll viorngci.dll")
PACKGE_ALL+=([VIOINPUT]="vioinput.cat vioinput.inf vioinput.pdb vioinput.sys viohidkmdf.pdb viohidkmdf.sys")
PACKGE_ALL+=([PVPANIC]="pvpanic.cat pvpanic.inf pvpanic.pdb pvpanic.sys")

# Vista  Win7  Wlh  Wnet  Wxp  XP
# config this Associative Arrays reference:
# https://mojo.redhat.com/docs/DOC-130115
declare -A BALLON_PATH NETKVM_PATH VIOSER_PATH VIOSCSI_PATH VIOSTOR_PATH VIORNG_PATH VIOINPUT_PATH PVPANIC_PATH
declare -A VFD_DEST_PATH VFD_ARCH_DEST_PATH ISO_DEST_PATH

# Balloon
BALLON_PATH=([2k3.x86]=Wxp [2k8.x86]=Wlh [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8 [xp.x86]=Wxp [w10.x86]=Win10 [2k16.x86]=NONE)
BALLON_PATH+=([2k3.amd64]=Wnet [2k8.amd64]=Wlh [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)
# NetKVM
NETKVM_PATH=([2k3.x86]=NONE [2k8.x86]=Wlh [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8.1 [xp.x86]=NONE [w10.x86]=Win10 [2k16.x86]=NONE)
NETKVM_PATH+=([2k3.amd64]=NONE [2k8.amd64]=Wlh [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8.1 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8.1 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)
# vioserial 
VIOSER_PATH=([2k3.x86]=Wxp [2k8.x86]=Wlh [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8 [xp.x86]=Wxp [w10.x86]=Win10 [2k16.x86]=NONE)
VIOSER_PATH+=([2k3.amd64]=Wnet [2k8.amd64]=Wlh [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)
# Viostor
VIOSTOR_PATH=([2k3.x86]=Wnet [2k8.x86]=Wlh [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8 [xp.x86]=NONE [w10.x86]=Win10 [2k16.x86]=NONE)
VIOSTOR_PATH+=([2k3.amd64]=Wnet [2k8.amd64]=Wlh [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)
# Virtio-SCSI
VIOSCSI_PATH=([2k3.x86]=NONE [2k8.x86]=Wlh [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8 [xp.x86]=NONE [w10.x86]=Win10 [2k16.x86]=NONE)
VIOSCSI_PATH+=([2k3.amd64]=NONE [2k8.amd64]=Wlh [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)
# Virtio-rng
VIORNG_PATH=([2k3.x86]=NONE [2k8.x86]=Wlh [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8 [xp.x86]=NONE [w10.x86]=Win10 [2k16.x86]=NONE)
VIORNG_PATH+=([2k3.amd64]=NONE [2k8.amd64]=Wlh [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)
#Virtio-input
VIOINPUT_PATH=([2k3.x86]=NONE [2k8.x86]=NONE [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8 [xp.x86]=NONE [w10.x86]=Win10 [2k16.x86]=NONE)
VIOINPUT_PATH+=([2k3.amd64]=NONE [2k8.amd64]=NONE [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)
#Pvpanic
PVPANIC_PATH=([2k3.x86]=NONE [2k8.x86]=Wlh [2k8R2.x86]=NONE [2k12.x86]=NONE [2k12R2.x86]=NONE [w7.x86]=Win7 [w8.x86]=Win8 [w8.1.x86]=Win8 [xp.x86]=NONE [w10.x86]=Win10 [2k16.x86]=NONE)
PVPANIC_PATH+=([2k3.amd64]=NONE [2k8.amd64]=Wlh [2k8R2.amd64]=Win7 [2k12.amd64]=Win8 [2k12R2.amd64]=Win8 [w7.amd64]=Win7 [w8.amd64]=Win8 [w8.1.amd64]=Win8 [xp.amd64]=NONE [w10.amd64]=Win10 [2k16.amd64]=Win10)

# the driver path
ISO_DEST_PATH=([BALLON]=Balloon [NETKVM]=NetKVM [VIOSER]=vioserial [VIOSTOR]=viostor [VIOSCSI]=vioscsi [VIORNG]=viorng [VIOINPUT]=vioinput [PVPANIC]=pvpanic)
VFD_DEST_PATH=([Win2012]=2k12 [Win2012R2]=2k12R2 [Win2003]=2k3 [Win2008]=2k8 [Win2008R2]=2k8R2 [Win7]=w7 [Win8]=w8 [Win8.1]=w8.1 [WinXP]=xp [Win10]=w10 [Win2016]=2k16)
VFD_ARCH_DEST_PATH=([amd64]=amd64 [i386]=x86)


# Download the packages
if [ "_$NEED_WGET" == "_Yes" ]
then
    echo "=========== Get the files from the server =========="
    rm -rf $VIR_WIN_RESOURCE_PATH/*
    rm -rf $VIR_WIN_VFS_RESOURCE_PATH/*
    rm -rf $VIR_WIN_QXL_RESOURCE_PATH/*
    rm -rf $VIR_WIN_TGT_ISO_PATH/*
    rm -rf $VIR_WIN_TGT_VFD_PATH/*
    rm -rf $VIR_WIN_QEMU_GA_RESOURCE_PATH/*

    set -e
    VIRTIO_WIN_PKG_NAME=virtio-win-prewhql-$MAIN_VERSION-$SUB_VERSION.zip
    wget $URL_VIRT_WIN_ZIP  -O $VIR_WIN_RESOURCE_PATH/$VIRTIO_WIN_PKG_NAME  2>&1 >/dev/null
    wget $URL_QXL_W7_X64    -O $VIR_WIN_QXL_RESOURCE_PATH/QXL_W7_X64.zip    2>&1 >/dev/null
    wget $URL_QXL_W7_X86    -O $VIR_WIN_QXL_RESOURCE_PATH/QXL_W7_X86.zip    2>&1 >/dev/null
    wget $URL_QXL_XP_X86    -O $VIR_WIN_QXL_RESOURCE_PATH/QXL_XP_X86.zip    2>&1 >/dev/null
    wget $URL_QXL_2K8R2_X64 -O $VIR_WIN_QXL_RESOURCE_PATH/QXL_2K8R2_X64.zip 2>&1 >/dev/null
    #wget $URL_QXL_W8        -O $VIR_WIN_QXL_RESOURCE_PATH/QXL_W8.zip        2>&1 >/dev/null
    wget $URL_QEMU_GA_X86     -O $VIR_WIN_QEMU_GA_RESOURCE_PATH/qemu-ga-x86.msi   2>&1 >/dev/nulL
    wget $URL_QEMU_GA_X64     -O $VIR_WIN_QEMU_GA_RESOURCE_PATH/qemu-ga-x64.msi   2>&1 >/dev/null

    unzip -d $VIR_WIN_RESOURCE_PATH     $VIR_WIN_RESOURCE_PATH/$VIRTIO_WIN_PKG_NAME  2>&1 >/dev/null
    unzip -d $VIR_WIN_QXL_RESOURCE_PATH $VIR_WIN_QXL_RESOURCE_PATH/QXL_W7_X64.zip    2>&1 >/dev/null
    unzip -d $VIR_WIN_QXL_RESOURCE_PATH $VIR_WIN_QXL_RESOURCE_PATH/QXL_W7_X86.zip    2>&1 >/dev/null
    unzip -d $VIR_WIN_QXL_RESOURCE_PATH $VIR_WIN_QXL_RESOURCE_PATH/QXL_XP_X86.zip    2>&1 >/dev/null
    unzip -d $VIR_WIN_QXL_RESOURCE_PATH $VIR_WIN_QXL_RESOURCE_PATH/QXL_2K8R2_X64.zip 2>&1 >/dev/null
    #unzip -d $VIR_WIN_QXL_RESOURCE_PATH $VIR_WIN_QXL_RESOURCE_PATH/QXL_W8.zip        2>&1 >/dev/null
    set +e
else
    rm -rf $VIR_WIN_TGT_ISO_PATH/*
    rm -rf $VIR_WIN_TGT_VFD_PATH/*

    if [ ! -d $VIR_WIN_RESOURCE_PATH ]
    then
        echo "You must download the source file, not using -n"
        exit 1
    fi
fi


# Create iso dirs
ISO_PKG_MODULES="BALLON NETKVM VIOSER VIOSTOR VIOSCSI VIORNG VIOINPUT PVPANIC"
for module in $ISO_PKG_MODULES
do
    # WIN_ISO_VERSION="2k12 2k12R2 2k3 2k8 2k8R2 w7 w8 w8.1 xp w10 2k16"
    for dest_dir in $WIN_ISO_VERSION
    do
        #ARCH_ISO="amd64 x86"
        for arch in $ARCH_ISO
        do
            PACK_PATH=${module}_PATH[${dest_dir}.${arch}]
            if [ ${!PACK_PATH} != "NONE" ]
            then
                mkdir -p $VIR_WIN_TGT_ISO_PATH/${ISO_DEST_PATH[$module]}/$dest_dir/$arch/
            fi
        done
    done
done


# Create vfd dirs
VFD_PKG_MODULES="NETKVM VIOSTOR VIOSCSI QXL"
for arch in $ARCH_VFD
do
    for dest_dir in $WIN_VFD_VERSION
    do
        PACK_PATH=NETKVM_PATH[${VFD_DEST_PATH[$dest_dir]}.${VFD_ARCH_DEST_PATH[$arch]}]
        if [ ${!PACK_PATH} != "NONE" ]
        then
            mkdir -p $VIR_WIN_TGT_VFD_PATH/$arch/$dest_dir/
        fi
    done
done

mkdir -p $VIR_WIN_TGT_ISO_PATH/{guest-agent,qxl}

set -e
# Copy iso file
echo "+===========================================+"
echo "|          copy virtio-win iso file         |"
echo "+===========================================+"
for module in $ISO_PKG_MODULES
do
    for pkg_need_copy in ${PACKGE_ALL[$module]}
    do
        ## WIN_ISO_VERSION="2k12 2k12R2 2k3 2k8 2k8R2 w7 w8 w8.1 xp w10 2k16"
        for dest_dir in $WIN_ISO_VERSION
        do
             #ARCH_ISO="amd64 x86"
            for arch in $ARCH_ISO
            do
                #such as PACK_PATH = NetKVM_PATH[w10.x86]
                PACK_PATH=${module}_PATH[${dest_dir}.${arch}]
                # ../virt_win_iso_create/iso/
                # ISO_DEST_PATH=([BALLON]=Balloon [NETKVM]=NetKVM [VIOSER]=vioserial [VIOSTOR]=viostor [VIOSCSI]=vioscsi [VIORNG]=viorng [VIOINPUT]=vioinput [PVPANIC]=pvpanic)
                # DIR_PATH=../virt_win_iso_create/iso/Balloon/w10/x86
                DIR_PATH=$VIR_WIN_TGT_ISO_PATH/${ISO_DEST_PATH[$module]}/$dest_dir/$arch
                if [ -d $DIR_PATH ]
                then
                    # VIR_WIN_RESOURCE_PATH = ../virt_win_iso_create/source
                    cp $VIR_WIN_RESOURCE_PATH/${!PACK_PATH}/$arch/$pkg_need_copy $DIR_PATH 2>&1 >/dev/null

                    if [ $module == "NETKVM" ]
                    then
                        if [[ ! ($dest_dir == "xp" || $dest_dir == "2k3") ]]
                        then
                            cp $VIR_WIN_RESOURCE_PATH/${!PACK_PATH}/$arch/${PACKGE_ALL[NETKVM_EXT]} \
                               $DIR_PATH 2>&1 >/dev/null
                        fi
                    elif [ $module == "BALLON" -o $module == "VIOSER" -o $module == "VIORNG" -o $module == "VIOINPUT" ]
                    then
                        if [ $dest_dir != "w10" -a $dest_dir != "2k16" ]
                        then
                            if [ $dest_dir == "w8" -o $dest_dir == "w8.1" -o $dest_dir == "2k12" -o $dest_dir == "2k12R2" ]
                            then
                                VERSION=01011
                            else
                                VERSION=01009
                            fi
                            echo "------------------------$VIR_WIN_RESOURCE_PATH/${!PACK_PATH}/$arch/WdfCoInstaller$VERSION.dll-------------------------"
                            cp $VIR_WIN_RESOURCE_PATH/${!PACK_PATH}/$arch/WdfCoInstaller$VERSION.dll \
                               $DIR_PATH 2>&1 >/dev/null
                        fi
                    fi
                fi
            done
        done
    done
done


# Copy vfd driver
echo "+===========================================+"
echo "|            copy virtio-vfd file           |"
echo "+===========================================+"
for arch in $ARCH_VFD
do
    for dest_dir in $WIN_VFD_VERSION
    do
        for module in $VFD_PKG_MODULES
        do
            DIR_PATH=$VIR_WIN_TGT_VFD_PATH/$arch/$dest_dir
            VFD_PKG=VFD_PACKGE_$module

            if [ $module != "QXL" ]
            then
                PACK_PATH=${module}_PATH[${VFD_DEST_PATH[$dest_dir]}.${VFD_ARCH_DEST_PATH[$arch]}]
                if [ -d $DIR_PATH ]
                then
                    for pkg_need_copy in ${!VFD_PKG}
                    do
                        if [ ${!PACK_PATH} != "NONE" ]
                        then
                            cp $VIR_WIN_RESOURCE_PATH/${!PACK_PATH}/${VFD_ARCH_DEST_PATH[$arch]}/$pkg_need_copy \
                               $DIR_PATH
                        fi
                    done
                fi
            else
                if [ -d $VIR_WIN_QXL_RESOURCE_PATH/${VFD_DEST_PATH[$dest_dir]}/${VFD_ARCH_DEST_PATH[$arch]} ]
                then
                    for pkg_need_copy in ${!VFD_PKG}
                    do
                        cp $VIR_WIN_QXL_RESOURCE_PATH/${VFD_DEST_PATH[$dest_dir]}/${VFD_ARCH_DEST_PATH[$arch]}/$pkg_need_copy \
                           $DIR_PATH
                    done
                fi
            fi
        done
    done
done


# Copy qxl driver
# https://mojo.redhat.com/docs/DOC-994900
for dest_dir in $WIN_QXL_VERSION
do
    cp -R $VIR_WIN_QXL_RESOURCE_PATH/$dest_dir $VIR_WIN_TGT_ISO_PATH/qxl
done

# Copy qemu-ga-win
cp -R $VIR_WIN_QEMU_GA_RESOURCE_PATH/* $VIR_WIN_TGT_ISO_PATH/guest-agent


echo "+===========================================+"
echo "|          create virtio-win-iso            |"
echo "+===========================================+"

touch $VIR_WIN_TGT_VFD_PATH/disk1
cat > $VIR_WIN_TGT_VFD_PATH/txtsetup.oem << EOF
[Disks]
d1 = "OEM DISK (SCSI) WinXP/32-bit",\disk1,\i386\WinXP
d2 = "OEM DISK (SCSI) Win2003/32-bit",\disk1,\i386\Win2003
d3 = "OEM DISK (SCSI) Win2003/64-bit",\disk1,\amd64\Win2003

[Defaults]
SCSI = WXP32

[scsi]
WXP32  = "Red Hat VirtIO SCSI Disk Device WinXP/32-bit"
WNET32 = "Red Hat VirtIO BLOCK Disk Device Win2003/32-bit"
WNET64 = "Red Hat VirtIO BLOCK Disk Device Win2003/64-bit"

[Files.scsi.WXP32]
driver = d1, viostor.sys, viostor
inf    = d1, viostor.inf
catalog= d1, viostor.cat

[Files.scsi.WNET32]
driver = d2, viostor.sys, viostor
inf    = d2, viostor.inf
catalog= d2, viostor.cat

[Files.scsi.WNET64]
driver = d3, viostor.sys, viostor
inf    = d3, viostor.inf
catalog= d3, viostor.cat

[HardwareIds.scsi.WXP32]
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00000000", "viostor"
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00020000", "viostor"
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00021AF4", "viostor"

[HardwareIds.scsi.WNET32]
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00000000", "viostor"
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00020000", "viostor"
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00021AF4", "viostor"

[HardwareIds.scsi.WNET64]
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00000000", "viostor"
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00020000", "viostor"
id = "PCI\VEN_1AF4&DEV_1001&SUBSYS_00021AF4", "viostor"

[Config.WXP32]
value = Parameters\PnpInterface,5,REG_DWORD,1

[Config.WNET32]
value = Parameters\PnpInterface,5,REG_DWORD,1

[Config.WNET64]
value = Parameters\PnpInterface,5,REG_DWORD,1

EOF

chmod 755 $VIR_WIN_TGT_VFD_PATH/disk1
chmod 755 $VIR_WIN_TGT_VFD_PATH/txtsetup.oem


if [ $UPDATE_NFS == "Yes" ]
then
    [ -d $NFS_MNT ] || mkdir -p $NFS_MNT
    
    if [ -z $(mount|grep $NFS_MNT) ]
    then
        mount 10.73.194.27:/vol/s2kvmauto/iso $NFS_MNT
    else
        echo "/var/tmp/nfs is busy or already mounted"
    fi

    DST_PATH=$NFS_MNT/windows
    NEED_UMOUNT="Yes"
else
    DST_PATH=$ROOT_PATH/virtio-win-prewhql
    NEED_UMOUNT="No"
fi


# Create floppy and iso
ISO_LAT_NAME=virtio-win.latest_prewhql.iso
VFD_LAT_i386=virtio-win.latest_prewhql.vfd.i386
VFD_LAT_amd64=virtio-win.latest_prewhql.vfd.x86_64

[ -d $TMP_MNT ] || mkdir -p $TMP_MNT
[ -d $DST_PATH ] || mkdir -p $DST_PATH

for arch in $ARCH_VFD
do
    dd if=/dev/zero of=$VIR_WIN_VFS_RESOURCE_PATH/floppy.img bs=1024 count=2880
    sleep 2
    echo -e "\n\n\n\n\n\n"
    ls $VIR_WIN_VFS_RESOURCE_PATH/floppy.img
    echo -e  "\n\n\n\n\n\n"
    sleep 2
    mkfs.msdos $VIR_WIN_VFS_RESOURCE_PATH/floppy.img
    echo -e "\n\n\n\n\n\n"
    ls $VIR_WIN_VFS_RESOURCE_PATH/floppy.img
    echo -e "\n\n\n\n\n\n"
    mount $VIR_WIN_VFS_RESOURCE_PATH/floppy.img -o loop $TMP_MNT
    cp -R $VIR_WIN_TGT_VFD_PATH/{$arch,disk1,txtsetup.oem} $TMP_MNT
    sync
    cd $TMP_DIR
    umount $TMP_MNT
    DST_VFD_NAME="virtio-win-prewhql-$MAIN_VERSION-${SUB_VERSION}_$arch.vfd"
    mv $VIR_WIN_VFS_RESOURCE_PATH/floppy.img $VIR_WIN_TGT_ISO_PATH/$DST_VFD_NAME
    chmod 755 $VIR_WIN_TGT_ISO_PATH/$DST_VFD_NAME
    [ -e "$DST_PATH/$DST_VFD_NAME" ] && rm -f $DST_PATH/$DST_VFD_NAME
    cp $VIR_WIN_TGT_ISO_PATH/$DST_VFD_NAME $DST_PATH/
    VFD_LAT_NAME=VFD_LAT_$arch
    #[ -e "${!VFD_LAT_NAME}" ] && rm -f ${!VFD_LAT_NAME}
    cd $DST_PATH && ln -sf $DST_VFD_NAME ${!VFD_LAT_NAME}
    ls
    cd $TMP_DIR
done

[ -e "$DST_PATH/$ISO_LAT_NAME" ] && rm -r $DST_PATH/$ISO_LAT_NAME
mkisofs -o $DST_PATH/virtio-win-prewhql-$MAIN_VERSION-$SUB_VERSION.iso \
        -input-charset iso8859-1 -J -R -V "Virtio-Win" $VIR_WIN_TGT_ISO_PATH
chmod 755 $DST_PATH/virtio-win-prewhql-$MAIN_VERSION-$SUB_VERSION.iso
cd $DST_PATH && ln -sf virtio-win-prewhql-$MAIN_VERSION-$SUB_VERSION.iso $ISO_LAT_NAME
ls
cd $TMP_DIR
set +e


echo "+===========================================+"
echo "|         Send email and clean env          |"
echo "+===========================================+"
function mail_notify()
{
    mail_content="virtio-win-prewhql-$MAIN_VERSION-${SUB_VERSION} have been created.\n"
    mail_content+="    virtio-win-prewhql version is: ${MAIN_VERSION}.${SUB_VERSION} \n"
    mail_content+="    qxl version is: ${MAIN_VERSION}.${QXL_VERSION} \n"
    #mail_content+="    qxlwddm version is: ${MAIN_VERSION}.${QXLWDDM_VERSION} \n\n"
    mail_content+="This mail is create by a bot, "
    mail_content+="anything please contact the maintainer: ${MAINTAINER_MAIL}."
    mail_subject="Create virtio-win-prewhql-$MAIN_VERSION-${SUB_VERSION}"
    echo -e "$mail_content" | mail -s "$mail_subject" -r virtio-win@redhat.com $NOTIFY_MAIL_LIST
}

if [ "_$SEND_MAIL" == "_Yes" -a "_$UPDATE_NFS" == "_Yes" ]
then
    mail_notify
fi

if [ "_$NEED_UMOUNT" == "_Yes" ]
then
    umount $NFS_MNT
fi

if [ "_$CLEAR_PATH" == "_Yes" ]
then
    rm -rf $VIR_WIN_TGT_ISO_PATH $VIR_WIN_TGT_VFD_PATH
    rm -rf $ROOT_PATH/virt_win_iso_create
fi

if [ $VIRTIO_WIN_VER_LAT ]
then
    VIRTIO_WIN_PREWHQL_INFOS="virtio-win-prewhql: $VIRTIO_WIN_VER_LAT"
    if [ "$VIRTIO_WIN_PREWHQL_INFOS" == "$(cat $INFO_FILE)" ]
    then
        exit
    else
        echo $VIRTIO_WIN_PREWHQL_INFOS > $INFO_FILE
    fi
fi
#if [ ! losetup -a | grep -q "/dev/loop[1-9]" ]; then
#else
#    losetup -a | grep -q "/dev/loop[1-9]"  | cut -d: -f1 | xargs losetup -d
#fi
exit 0
