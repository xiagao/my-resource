#!/usr/bin/env python
import os
import sys

import argparse
import csv
import yaml

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CSV_FILE = os.path.join(BASE_DIR, 'CategoryMap.csv')


class Archiver(object):

    def __init__(self):
        self.records = {}

    def add_record(self, record):
        category = record['category']
        if not record['configs']:
            record['configs'] = '{}'
        configs = yaml.load(record['configs'])
        owners = record['owners']
        feature = record['feature']
        host_req = record['host_req']
        if not self.records.has_key(category):
            self.records[category] = {}
        index = len(configs.keys())
        if not self.records[category].has_key(index):
            self.records[category][index] = []
        self.records[category][index].append([configs, owners, feature, host_req])

    def get_feature_info(self, item):
        category = item['category']
        if not self.records.has_key(category):
            raise Exception("Category '%s' is missed in '%s'" % (category, CSV_FILE))
        records = self.records[category]
        for index in sorted(records.keys(), reverse=True):
            for record in records[index]:
                if len(record[0].viewitems() & item.viewitems()) == index:
                    return record[1:]
        raise Exception("Configs '%s' is missed in '%s'" % (item, CSV_FILE))

def parse_opts():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--task-cmd',
        metavar='PARAM',
        help="staf command"
    )
    parser.add_argument(
        '-o', '--out-file',
        metavar='PATH',
        dest='out_file',
        default=sys.stdout,
        type=argparse.FileType('w+'),
        help="path of out file"
    )
    return vars(parser.parse_args())

def main():
    params= {}
    records = []
    opts = parse_opts()
    for parameter in opts['task_cmd'].split():
       if parameter.find("=") >=0:
           str = parameter.lstrip('--').split('=')
           params[str[0]] = str[1]
    with open(CSV_FILE, 'r') as csvfile:
        next(csvfile)
        fieldnames = ("category","configs","owners","feature","host_req")
        reader = csv.DictReader( csvfile, fieldnames)
        for row in reader:
            records.append(row)
    archiver = Archiver()
    for record in records:
        archiver.add_record(record)
    info = archiver.get_feature_info(params)
    writer = csv.writer(opts['out_file'], delimiter='\t')
    writer.writerow(info)

if __name__ == '__main__':
    main()
