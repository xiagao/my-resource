#!/usr/bin/env python
import os
import sys
import argparse

from ConfigParser import ConfigParser

from jira import JIRA


class JiraClient(object):

    def __init__(self, cert_path):
        self.server_url = 'https://projects.engineering.redhat.com'
        self.cert_path = cert_path
        options = {
            'server': self.server_url,
            'verify': self.cert_path
        }
        home_dir = os.path.expanduser('~')
        config_dir = os.path.join(home_dir, '.jira.cfg')
        CONFIG = ConfigParser()
        CONFIG.read(os.path.expanduser(config_dir))
        username = CONFIG.get('jira', 'username')
        password = CONFIG.get('jira', 'password')
        self.jira = JIRA(options, basic_auth=(username, password))

    def create_issue(self, opts):
        workers = opts["workers"].replace('@redhat.com', '').split(',')
        assignee = workers[0].strip()
        if not (opts["project_key"] and opts["summary"] and
                len(opts["workers"]) and opts["issue_type"]
                and opts["description_file"]):
            exit(0)
        with open(str(opts["description_file"]), 'r') as f:
            description = f.read().strip()
        issue_dict = {
            'project': {'key': opts["project_key"]},
            'summary': opts["summary"],
            'assignee': {'name': assignee},
            'issuetype': {'name': opts["issue_type"]},
            'description': description
        }
        if opts["parent_key"]:
            issue_dict.update({'parent': {'id': opts["parent_key"]}})
        issue = self.jira.create_issue(fields=issue_dict)
        for watcher in workers[1:]:
            self.jira.add_watcher(issue, watcher.strip())
        print 'Issue created, key of issue: ' + str(issue.key)
        self.issue_key = issue.key
        self.jira.kill_session()

    def add_comment(self, opts):
        if opts["comment_id"]:
            comment = self.jira.comment(opts["issue_key"], opts["comment_id"])
            comment.update(body=opts["comment"])
            print 'Comment updated, id of comment: ' + str(comment.id)
        else:
            issue = self.jira.issue(opts["issue_key"], fields='comment')
            comment = self.jira.add_comment(issue, opts["comment"])
            print 'Comment added, id of comment: ' + str(comment.id)
        self.comment_id = comment.id
        self.jira.kill_session()


def parse_opts():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--cert-path',
        help="The path of the certificate",
        default=""
    )
    parser.add_argument(
        '--project-key',
        help="The key of jira project",
        default=""
    )
    parser.add_argument(
        '--summary',
        help="The summary of jira issue",
        default=""
    )
    parser.add_argument(
        '--workers',
        help="List of assignee and watchers of the jira issue",
        default=""
    )
    parser.add_argument(
        '--issue-type',
        help="Type of jira issue",
        default="Sub-task"
    )
    parser.add_argument(
        '--description-file',
        help="A file used to store description of jira issue",
        default=""
    )
    parser.add_argument(
        '--parent-key',
        help="The key of parent jira issue",
        default=""
    )
    parser.add_argument(
        '--issue-key',
        help="The key of jira issue",
        default=""
    )
    parser.add_argument(
        '--comment-id',
        help="The comment id of jira issue",
        default=""
    )
    parser.add_argument(
        '--comment',
        help="The comment of jira issue",
        default=""
    )
    return vars(parser.parse_args())

def main():
    cmdlist = ['create_issue', 'add_comment']
    if len(sys.argv) < 1 or (sys.argv[1] not in cmdlist):
        print 'Usage: %s ' % os.path.basename(__file__) + '|'.join(cmdlist)
        sys.stderr.write("Usage Error\n")
        sys.exit(0)
    cmd = sys.argv[1]
    sys.argv.remove(cmd)
    opts = parse_opts()
    if not opts["cert_path"]:
        base_dir = os.path.dirname(os.path.abspath(__file__))
        opts["cert_path"] = os.path.abspath(os.path.join(base_dir,
                                         '../../cert/RH-IT-Root-CA.crt'))
    jira_client = JiraClient(opts["cert_path"])
    func = getattr(jira_client, cmd)
    func(opts)

if __name__ == '__main__':
    main()
