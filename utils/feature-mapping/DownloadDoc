#!/usr/bin/env python

import os
import sys
import io
import httplib2
import argparse

from apiclient import discovery
from oauth2client import client
from oauth2client import tools
from oauth2client.file import Storage
from apiclient.http import MediaIoBaseDownload

class GoogleDoc(object):

    def __init__(self):
        # If modifying these scopes, delete your previously saved credentials
        # at ~/.credentials/drive-python-download.json
        base_dir = os.path.dirname(os.path.abspath(__file__))
        self.client_secret_file = os.path.join(base_dir, 'client_secret.json')
        self.scopes = 'https://www.googleapis.com/auth/drive.readonly'
        self.application_name = 'Google Document Download'
        home_dir = os.path.expanduser('~')
        credential_dir = os.path.join(home_dir, '.credentials')
        if not os.path.exists(credential_dir):
            os.makedirs(credential_dir)
        self.credential_path = os.path.join(credential_dir,
                                       'drive-python-download.json')
        self.store = Storage(self.credential_path)
        self.credentials = self.store.get()

    def install(self):
        """
        Install valid user credentials.
        If nothing has been stored, or if the stored credentials are invalid,
        the OAuth2 flow is completed to obtain the new credentials.
        """
        if not self.credentials or self.credentials.invalid:
            flow = client.flow_from_clientsecrets(self.client_secret_file,
                                                  self.scopes)
            flow.user_agent = self.application_name
            try:
                flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()
            except ImportError:
                flags = None
            if flags:
                self.credentials = tools.run_flow(flow, self.store, flags)
            else: # Needed only for compatibility with Python 2.6
                self.credentials = tools.run(flow, store)
            print('Storing credentials to ' + self.credential_path)

    def download(self):
        """
        Download document fromm Google drive through Google Drive API service.
        """
        if not self.credentials or self.credentials.invalid:
            raise Exception("credentials '%s' is missed or invalid" %
                            self.credential_path)
        db_path = os.path.join(os.environ.get('WORKSPACE'),
                               'MappingTable.xlsx')
        http = self.credentials.authorize(httplib2.Http())
        service = discovery.build('drive', 'v3', http=http)
        opts = parse_opts()
        request = service.files().export_media(fileId=opts['file_id'],
                                               mimeType=opts['mime_type']
                                              ).execute()
        with open(db_path, 'wb') as f:
            f.write(request)
        print ("Download Complete")


def parse_opts():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--file-id',
        help="The ID of the document",
        default=""
    )
    parser.add_argument(
        '--mime-type',
        help="The MIME type of the format requested",
        default=""
    )
    return vars(parser.parse_args())

def main():
    cmdlist = ['install', 'download']
    if len(sys.argv) < 1 or (sys.argv[1] not in cmdlist):
        print 'Usage: %s ' % os.path.basename(__file__) + '|'.join(cmdlist)
        sys.stderr.write("Usage Error\n")
        sys.exit(0)
    cmd = sys.argv[1]
    doc = GoogleDoc()
    func = getattr(doc, cmd)
    sys.argv.remove(cmd)
    func()

if __name__ == '__main__':
    main()
