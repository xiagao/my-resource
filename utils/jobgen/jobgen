#!/usr/bin/env python

# TODO https://github.com/mfalesni/bkr-job-gen

import os
import re
import sys
import urllib2

from optparse import OptionParser
from xml.dom import minidom

class Job(object):
    def __init__(self, autotest_type, distro_reqs={}, host_reqs={},
                 ks_file_path="", packages=[], repos=[], staf_cmd="",
                 whiteboard="", xml_file_path="", qemu_req="",
                 reserve_time=0, bootstrap_params=""):
        self.autotest_type = autotest_type
        self.distro_reqs = distro_reqs
        self.host_reqs = host_reqs
        self.qemu_req = qemu_req
        self.reserve_time = reserve_time

        with open(ks_file_path) as ks_file:
            self.ks_append_data = ks_file.read().strip()

        self.packages = packages
        self.repos = repos
        self.staf_cmd = staf_cmd
        self.whiteboard = whiteboard
        self.bootstrap_params = bootstrap_params

        with open(xml_file_path) as xml_file:
            data = re.sub(">[\s\r\n]+<", "><", xml_file.read().strip())
            self.doc = minidom.parseString(data)
        self._fill_form()

    def get_whiteboard(self):
        return self.doc.createTextNode(self.whiteboard)

    def get_repos(self):
        def _repo_id(id=1):
            while True:
                yield "extra_repo" + str(id)
                id += 1

        if not self.repos:
            return None
        r_id = _repo_id()
        node = self.doc.createElement("repos")
        for repo in self.repos:
            sub_node = self.doc.createElement("repo")
            sub_node.setAttribute("name", r_id.next())
            sub_node.setAttribute("url", repo)
            node.appendChild(sub_node)
        return node

    def get_packages(self):
        if not self.packages:
            return None
        node = self.doc.createElement("packages")
        for packages in self.packages:
            sub_node = self.doc.createElement("package")
            sub_node.setAttribute("name", packages)
            node.appendChild(sub_node)
        return node

    def get_ks_append(self):
        return self.doc.createCDATASection(self.ks_append_data)

    def get_distro_reqs(self):
        node = self.doc.createElement("and")
        for req in self.distro_reqs:
            for node_name, attrs in req.items():
                sub_node = self.doc.createElement(node_name)
                for attr_name, attr_value in attrs.items():
                    sub_node.setAttribute(attr_name, attr_value)
                node.appendChild(sub_node)
        return node

    def get_host_reqs(self):
        node = self.doc.createElement("and")
        for req in self.host_reqs:
           for node_name, attrs in req.items():
               sub_node = self.doc.createElement(node_name)
               for attr_name, attr_value in attrs.items():
                   sub_node.setAttribute(attr_name, attr_value)
               node.appendChild(sub_node)
        return node

    def get_autotest_type(self):
        node = self.doc.createElement("param")
        node.setAttribute("name", "")
        node.setAttribute("value", self.autotest_type)
        return node

    def get_staf_cmd(self):
        node = self.doc.createElement("param")
        node.setAttribute("name", "PYTHON_CMD")
        node.setAttribute("value", self.staf_cmd)
        return node

    def get_bootstrap_params(self):
        node = self.doc.createElement("param")
        node.setAttribute("name", "BOOTSTRAP_PARAMS")
        node.setAttribute("value", self.bootstrap_params)
        return node

    def install_qemu(self):
        if not self.qemu_req:
            return None
        node = self.doc.createElement("task")
        node.setAttribute("name", "/distribution/command")
        node.setAttribute("role", "STANDALONE")
        params_node = self.doc.createElement("params")
        param_cmd_node = self.doc.createElement("param")
        param_cmd_node.setAttribute("name", "CMDS_TO_RUN")
        param_cmd_node.setAttribute("value",
                                    "/root/brew_install.sh "+self.qemu_req)
        params_node.appendChild(param_cmd_node)
        node.appendChild(params_node)
        return node

    def reservesys(self):
        if not self.reserve_time:
            return None
        node = self.doc.createElement("task")
        node.setAttribute("name", "/distribution/reservesys")
        node.setAttribute("role", "STANDALONE")
        params_node = self.doc.createElement("params")
        param_time_node = self.doc.createElement("param")
        param_time_node.setAttribute("name", "RESERVETIME")
        param_time_node.setAttribute("value", str(self.reserve_time*3600))
        params_node.appendChild(param_time_node)
        node.appendChild(params_node)
        return node

    def _fill_form(self):
        def _replace_node(node, func):
            parent_node = node.parentNode
            new_node = func()
            if new_node:
                parent_node.replaceChild(new_node, node)
            else:
                parent_node.removeChild(node)
            return

        node_list = self.doc.getElementsByTagName("REPLACE_ME")
        for node in node_list:
            func_name = node.getAttribute("function")
            _replace_node(node, getattr(self, func_name))

    def write_xml(self, out_file_path):
        with open(out_file_path, "w") as out_file:
            self.doc.writexml(out_file, addindent=" "*2, newl="\n")

def parse_host_reqs(requires):
    def _parse_req(req):
        if not req:
            return None

        pattern = r"([\w\.\-]+)\s*(=|!=|>|>=|<|<=|~)\s*([\w\.\-\%]+)"
        result = re.search(pattern, req)
        if result:
            (key, op, value) = result.groups()
            op = ((op == "~") and "like") or op
            key = key.split(".")
            attr = key.pop(0)
            if not attr:
                return None

            req_dict = {}
            if attr.lower() == "key_value":
                if not len(key):
                    return None
                req_dict["key"] = key.pop()

            req_dict["op"] = op
            req_dict["value"] = value
            return {attr: req_dict}

        print("Unknown requirement: %s" % req)
        return None

    req_list = [_parse_req(req.strip()) for req in requires.split(",")]
    return filter(lambda x: x, req_list)

def parse_opts():
    usage = "%prog [options] arg"
    parser = OptionParser(usage)
    parser.add_option('-a', '--arch', help="arch name")
    parser.add_option('-c', '--compose',
                      help='compose id (e.g. "RHEL-x.y-mmdd.n") '
                      'or label (e.g. "latest-RHEL-7")')
    parser.add_option('-k', '--ks-file', help="kickstart file path")
    parser.add_option('-m', '--host-requires', help="host requires",
                      default="", dest="host_reqs")
    parser.add_option('-o', '--out-file', help="out file path",
                      default="job.xml")
    parser.add_option('-p', '--packages', help="packages' name", default="")
    parser.add_option('-q', '--qemu-req', help="QEMU requirement", default="")
    parser.add_option('-r', '--repos', help="repos' url", default="")
    parser.add_option('-s', '--staf-cmd', help="staf-kvm command", default="")
    parser.add_option('-b', '--bootstrap-params', help="bootstrap params",
                      default="--upstream --verbose")
    parser.add_option('-t', '--autotest-type', help="autotest type",
                      default="devel")
    parser.add_option('--reserve-time', help="reserve time (unit: hour)",
                      default=0, type="int")
    parser.add_option('-w', '--whiteboard', help="job whiteboard",
                      default="test job")
    parser.add_option('-x', '--xml-file', help="xml file path")
    return parser.parse_args()


if __name__ == '__main__':
    opts, args = parse_opts()
    base_dir = os.path.dirname(os.path.abspath(__file__))

    distro_reqs = [
        {"arch":    {"op": "=", "value": opts.arch}},
        {"variant": {"op": "=", "value": "Server"}},
        {"name":    {"op": "=", "value": opts.compose}},
    ]

    host_reqs = parse_host_reqs(opts.host_reqs)
    host_reqs += [
        {"arch":        {"op": "=", "value": opts.arch}},
        {"hypervisor":  {"op": "=", "value": ""}},
        {"system_type": {"op": "=", "value": "Machine"}}
    ]

    if not getattr(opts, "ks_file"):
        opts.ks_file = os.path.join(base_dir, "templates/default.ks")
    if not getattr(opts, "xml_file"):
        opts.xml_file = os.path.join(base_dir, "templates/default.xml")
    repos = (opts.repos and opts.repos.split(';')) or []
    packages = (opts.packages and opts.packages.split(';')) or []

    job = Job(autotest_type=opts.autotest_type, distro_reqs=distro_reqs,
              host_reqs=host_reqs, ks_file_path=opts.ks_file,
              repos=repos, packages=packages, whiteboard=opts.whiteboard,
              staf_cmd=opts.staf_cmd, xml_file_path=opts.xml_file,
              qemu_req=opts.qemu_req,reserve_time=int(opts.reserve_time),
              bootstrap_params=opts.bootstrap_params)
    job.write_xml(opts.out_file)
